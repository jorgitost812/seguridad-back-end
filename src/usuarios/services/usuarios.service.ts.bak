import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CreateUsuarioDto } from './../dto/create-usuario.dto';
import { UpdateUsuarioDto } from './../dto/update-usuario.dto';
import { Usuario } from '../entities/usuario.entity';
//import { runInThisContext } from 'vm';

@Injectable()
export class UsuariosService {
   constructor(
    @InjectRepository(Usuario) private usuariosRepo: Repository <Usuario>
   ) {}

   findAll(){
    console.log('Se mostraron todos los registros' );
      return this.usuariosRepo.find({relations: ['jc','rol','jc.municipio','jc.municipio.provincia'] });
   }
   findOne(id: number){
    console.log('Registro: '+ id +' fue consultado');
    return this.usuariosRepo.findOne(id, {relations: ['jc','rol','jc.municipio','jc.municipio.provincia'] });
   }
   async create(createUsuarioDto: CreateUsuarioDto){
      console.log('Usuario: '+createUsuarioDto.email +' fue agregado');
       const nuevaTarea = await this.usuariosRepo.create(createUsuarioDto);
       return this.usuariosRepo.save(nuevaTarea);
   } 
   async findByEmail(email: string): Promise<Usuario | any>{
      try {
        const usuario = await this.usuariosRepo.findOne( { where: {email}}); 
        //console.log('Correo: '+ usuario );
        if( !usuario )   return  null;
        return usuario;
                
      } catch (error) {
          throw error;
      }
    }

   async update(id: number, updateUsuarioDto: UpdateUsuarioDto){
      const tarea = await this.usuariosRepo.findOne(id);
      this.usuariosRepo.merge(tarea, updateUsuarioDto);
      console.log('Usuario: '+ updateUsuarioDto.email +' fue actualizado');
      return this.usuariosRepo.save(tarea);
     } 

   async delete(id: number){
    await this.usuariosRepo.delete(id);
    console.log('registro: '+ id +' fue eliminado');
    return true;
   }

   findByIdJovenClub(jc): Promise<Usuario[]> {
      return this.usuariosRepo.find({ where: { jc: jc }, relations: ['jc','rol'] });
  }
  findByIdJovenClubAndNombreRol(jc, rol): Promise<Usuario[]> {
    return this.usuariosRepo.createQueryBuilder("usuario")
      .innerJoinAndSelect("usuario.rol", "rol")
      .where("rol.nombre = :nombre and usuario.jc = :jc", { nombre: rol, jc: jc })
      .getMany();
}
  findByIdMunicipioAndNombreRol(municipio, rol): Promise<Usuario[]> {
  return this.usuariosRepo.createQueryBuilder("usuario")
    .innerJoinAndSelect("usuario.rol", "rol")
    .innerJoinAndSelect("usuario.jc", "jc")
    .innerJoinAndSelect("jc.municipio", "id")
    .where("rol.nombre = :nombre and jc.municipio = :municipio", { nombre: rol, municipio: municipio })
    .getMany();
}
  findByIdRol(rol): Promise<Usuario[]> {
      return this.usuariosRepo.find({ where: { rol: rol }, relations: ['jc','rol'] });
  }
  
  findByNombreRol(nombre): Promise<Usuario[]> {
      return this.usuariosRepo.createQueryBuilder("usuario")
      .innerJoinAndSelect("usuario.rol", "rol")
      .where("rol.nombre = :nombre", { nombre: nombre })
      .getMany();
  }
}
